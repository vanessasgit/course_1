1. Name what each of the below is:


  a = 1 
  # => ex. a is a local variable, and is a Fixnum object with
  value 1 
  
  @a = 2
  #instance variable that is a Fixnum set to 2.
  
  user = User.new
  #user object that is instantiated for the User class.
  
  user.name
  #getter method for the user object. This returned the name instance variable for the user object.
  
  user.name = "Joe"
  # setter methods. This sets the user's name to Joe.

2. How does a class mixin a module?
  def ModuleName
  end

  class ClassName
  include ModuleName
  end

3. What's the difference between class variables and instance variables?
  class variables are @@ and instance variables are @. Class variables are used to keep track of information across objects and are available to all class decendents where as instance variables are only available to that class.

4. What does attr_accessor do?
   it gives us the getter and setter methods for the instance variables.

5. How would you describe this expression: Dog.some_method
The dog class is calling some_method inside of the dog class.

6. In Ruby, what's the difference between subclassing and mixing in modules?
subclass can only have one super class. subclassing (inheritance)is a relationship. Modules has a relationship. 

7. Given that I can instantiate a user like this: User.new('Bob'), what would the initialize method look like for the User class?

class User
  attr_accessor :name
  def intiailize(name)
   @name = name
  end
end

8. Can you call instance methods of the same class from other instance methods in that class? 
Yes. Only if the class is inherited.

9. When you get stuck, what's the process you use to try to trap the error?
Look at the error and what lines it is coming from and try to isolate the code that is causing problems by using binding.pry and inserting the require 'pry' statement at the top of the file


